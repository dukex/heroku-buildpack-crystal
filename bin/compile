#!/bin/bash

# YAML parser from https://gist.github.com/pkuczynski/8665367
parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function json_value() {
  KEY=$1
  num=$2
  awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/\042'$KEY'\042/){print $(i+1)}}}' | tr -d ' "' | sed -n ${num}p
}

install_nodejs() {
  local dir="$1"

  echo "Resolving node version ${version:-(latest stable)} via semver.io..."
  local version=$(curl --silent --get --retry 5 --retry-max-time 15 --data-urlencode "range=${version}" https://semver.herokuapp.com/node/resolve)

  echo "Downloading and installing node $version..."
  local download_url="https://s3pository.heroku.com/node/v$version/node-v$version-$os-$cpu.tar.gz"
  local code=$(curl "$download_url" --silent --fail --retry 5 --retry-max-time 15 -o /tmp/node.tar.gz --write-out "%{http_code}")
  if [ "$code" != "200" ]; then
    echo "Unable to download node $version; does it exist?" && false
  fi
  tar xzf /tmp/node.tar.gz -C /tmp
  rm -rf $dir/bin/node
  rm -rf $dir/bin/npm
  mv /tmp/node-v$version-$os-$cpu/* $dir
  chmod +x $dir/bin/*
}

install_node_modules() {
  local build_dir=${1:-}

  if [ -e $build_dir/package.json ]; then
    cd $build_dir

    if [ -e $build_dir/npm-shrinkwrap.json ]; then
      echo "Installing node modules (package.json + shrinkwrap)"
    else
      echo "Installing node modules (package.json)"
    fi
    npm install --unsafe-perm --userconfig $build_dir/.npmrc 2>&1
  else
    echo "Skipping (no package.json)"
  fi
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3


mkdir -p "$BUILD_DIR/.node/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.node/bin":$PATH


if [ -f $BUILD_DIR/.crystal-version ]; then
  CRYSTAL_VERSION=`cat $BUILD_DIR/.crystal-version | tr -d '\012'`
  CRYSTAL_VERSION_REASON='due to .crystal-version file'
else
  CRYSTAL_VERSION=`curl -s https://api.github.com/repos/crystal-lang/crystal/releases/latest | json_value tag_name 1 | tr -d '\012'`
  CRYSTAL_VERSION_REASON='due to latest release at https://github.com/crystal-lang/crystal'
fi

CRYSTAL_URL="https://github.com/crystal-lang/crystal/releases/download/$CRYSTAL_VERSION/crystal-$CRYSTAL_VERSION-1-linux-x86_64.tar.gz"
CRYSTAL_DIR=/tmp/crystal
unset GIT_DIR

# Install Crystal
echo "-----> Installing Crystal ($CRYSTAL_VERSION $CRYSTAL_VERSION_REASON)"
mkdir -p $CRYSTAL_DIR
curl -sL $CRYSTAL_URL | tar xz -C $CRYSTAL_DIR --strip-component=1

# Build the project
cd $BUILD_DIR

install_nodejs "$node_engine" "$BUILD_DIR/.node"
install_node_modules "$BUILD_DIR"

echo "-----> Installing Dependencies"
$CRYSTAL_DIR/bin/crystal deps

eval $(parse_yaml shard.yml "shard_")
echo "-----> Compiling src/${shard_name}.cr (auto-detected from shard.yml)"
$CRYSTAL_DIR/bin/crystal build src/${shard_name}.cr --release -o app

echo "-----> Compiling bin folders"
find bin -name "*.cr" -exec $CRYSTAL_DIR/bin/crystal build {} --release \;

echo "----> Compiling assets"
make assets_compile

